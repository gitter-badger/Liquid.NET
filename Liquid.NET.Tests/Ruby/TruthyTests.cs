//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     Source: truthy.txt
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Liquid.Ruby\writetest.rb
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Liquid.NET.Constants;
using NUnit.Framework;

namespace Liquid.NET.Tests.Ruby
{
    [TestFixture]
    public class TruthyTests {

        [Test]
        [TestCase(@"{% assign myarray = ""1"" |split: "","" %}{% if myarray %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"TRUTHY")]
        [TestCase(@"{% if myarray %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"NOT TRUTHY")]
        [TestCase(@"{% if myundefined == empty %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"NOT TRUTHY")]
        [TestCase(@"{% if myundefined == blank %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"NOT TRUTHY")]
        [TestCase(@"{% if nil == empty %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"NOT TRUTHY")]
        [TestCase(@"{% if ' ' == blank %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"NOT TRUTHY")]
        [TestCase(@"{% case nil == empty %}{% when true %}true{% when false %}false{% else %}else{% endcase %}", @"", @"else")]
        [TestCase(@"{% case nil.empty? %}{% when true %}true{% when false %}false{% else %}else{% endcase %}", @"", @"else")]
        [TestCase(@"{% if nil.empty? %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"NOT TRUTHY")]
        [TestCase(@"{% case nil %}{% when 0 %}zero{% when empty %}empty{% when nil %}nil{% else %}else{% endcase %}", @"", @"nil")]
        [TestCase(@"{% case nil %}{% when 0 %}zero{%else%}not zero{% endcase %}", @"", @"not zero")]
        [TestCase(@"{% case nil %}{% when false %}FALSE{% when true %}TRUE{%else%}NOT TRUE OR FALSE{% endcase %}", @"", @"NOT TRUE OR FALSE")]
        [TestCase(@"{% case 0 %}{% when 0 %}zero{%else%}not zero{% endcase %}", @"", @"zero")]
        [TestCase(@"{% case 0 %}{% when true %}TRUE{% when false %}FALSE{%else%}NOT TRUE OR FALSE{% endcase %}", @"", @"NOT TRUE OR FALSE")]
        [TestCase(@"{% assign x=nil %}{% if x %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"NOT TRUTHY")]
        [TestCase(@"{% assign x=""abc"" %}{% if x %}TRUTHY{% else %}NOT TRUTHY{% endif %}", @"", @"TRUTHY")]
        public void It_Should_Match_Ruby_Output(String input, String assigns, String expected) {

            // Arrange
            ITemplateContext ctx = new TemplateContext().WithAllFilters();
            
            foreach (var tuple in DictionaryFactory.CreateStringMapFromJson(assigns))
            {
                ctx.DefineLocalVariable(tuple.Item1, tuple.Item2);
            }

            
            var template = LiquidTemplate.Create(input);
            
            // Act
            String result = template.Render(ctx);
        
            // Assert
            Assert.That(result.Trim(), Is.EqualTo(expected));
        }

        
    }
}
